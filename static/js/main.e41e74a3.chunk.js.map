{"version":3,"sources":["icons/note.svg","icons/bar-chart.svg","icons/pie-chart.svg","icons/start.svg","icons/settings.svg","widgets/taskbarButton/TaskbarButton.js","widgets/Popover/Popover.js","Apps/BarChartApp.js","Apps/PieChartApp.js","Apps/NotesApp.js","Contexts/AppListContext.js","widgets/Menu/Menu.js","Contexts/DesktopConfigContext.js","widgets/Configuration/Configuration.js","widgets/taskbar/Taskbar.js","widgets/window/Window.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskbarButton","name","icon","isActive","handleClick","children","hideLabel","className","onClick","Fragment","src","alt","Popover","anchor","content","displayBeside","redrawOnChange","closeOnClick","popoverAnchor","useState","menuIsOpen","setMenuIsOpen","popoverStyle","setPopOverStyle","anchorEl","useRef","hiddenContentEl","useEffect","anchorNode","hiddenContentNode","padding","style","xCenter","document","body","offsetWidth","yCenter","offsetHeight","boundingRect","getClientRects","onBottomHalf","y","onLeftHalf","x","xOffset","yOffset","bottom","top","left","right","transform","calculateStyle","current","removeOutsideListeners","removeEventListener","handleOutsideClick","changeOpenState","setOpen","addEventListener","CSSTransition","in","classNames","timeout","ref","event","nativeEvent","stopImmediatePropagation","BarChartApp","timestamp","APP_PERSIST_KEY","generateData","dataBuffer","i","push","series1","Math","round","random","series2","localStorage","setItem","JSON","stringify","deserializedState","parse","getItem","generatedData","setGeneratedDate","data","margin","dataKey","formatter","legendName","fill","PieChartApp","sliceColors","value","innerRadius","animationBegin","animationDuration","map","entry","index","NotesApp","textContent","setTextContent","placeholder","onChange","text","target","AppListContext","React","createContext","newState","applications","Notes","description","BarChartIcon","PieChartIcon","AppListProvider","props","storedState","openAppList","state","setState","Provider","numWindows","useAppList","useContext","saveAppListState","setActiveApp","toggle","clickedAppConfig","find","item","Object","assign","lastActive","Date","getTime","windowConfiguration","minimized","sort","item1","item2","forEach","zIndex","getAppFromName","appName","currentConfig","availableAppList","openApp","width","height","maximized","closeApp","findIndex","app","splice","persistNewAppConfig","appConfig","windowConfig","getOpenConfigFromName","MenuEntry","clickHandler","Menu","menuEntry","key","DesktopConfigContext","DesktopConfigProvider","centered","taskbarLocation","console","log","useDesktopConfig","saveDesktopConfigState","setCentered","isCentered","setTaskbarLocation","Configuration","type","id","checked","Taskbar","vertical","getTaskbarButtonHandler","taskbarButtons","classes","StartIcon","CogIcon","Window","xMouseDownStart","parentBoundingBox","xMaxGrowth","startWidth","constrainToHorizontal","dragXOffset","boundingNode","windowNodeRef","yMouseDownStart","windowBoundingBox","yMaxGrowth","startHeight","constrainToVertical","dragYOffset","firstTime","setFirstTime","closing","setIsClosing","persistWindowPositioning","parseInt","getEventCoordinates","result","clientX","clientY","startsWith","touches","setupMouseInteraction","getBoundingClientRect","parentNode","coordinates","handleMouseDownResize","node","clientWidth","clientHeight","constrain","getAttribute","handleMouseMoveResize","handleMouseUpResize","diffX","diffY","min","classList","add","remove","handleMouseDownDrag","currentTarget","attributes","drag","handleMouseMoveDrag","handleMouseUpDrag","offsetLeft","offsetTop","e","draggedNode","draggedBoundingBox","xMax","yMax","xLocation","max","yLocation","wrappedContent","Children","child","cloneElement","onMouseDown","onTouchStart","draggable","setTimeout","onMouseUp","onTouchEnd","App","desktopNodeRef","currentApp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e41e74a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/note.87c9d851.svg\";","module.exports = __webpack_public_path__ + \"static/media/bar-chart.dd2a9f47.svg\";","module.exports = __webpack_public_path__ + \"static/media/pie-chart.19c1944f.svg\";","module.exports = __webpack_public_path__ + \"static/media/start.825e1d13.svg\";","module.exports = __webpack_public_path__ + \"static/media/settings.4f698a14.svg\";","import React from \"react\";\nimport './TaskbarButton.scss'\n\nconst TaskbarButton = ({name, icon, isActive, handleClick, children, hideLabel}) => {\n    return (\n        <div\n            className={`TaskbarButton  ${isActive ? 'isActive' : ''}`}\n            onClick={handleClick}\n        >\n            {children\n                ? children\n                : <React.Fragment>\n                    <img src={icon} className=\"small-icon\" alt=\"\"/>\n                    <span className={`app-name ${hideLabel ? 'hide-label' : ''}`}>{name}</span>\n                </React.Fragment>\n            }\n        </div>\n    )\n}\n\nexport default TaskbarButton;","import React, {useEffect, useRef, useState} from \"react\";\nimport './Popover.scss';\nimport {CSSTransition} from \"react-transition-group\";\n\nconst calculateStyle = (displayBeside, anchorNode, hiddenContentNode, padding = 0) => {\n    const style = {};\n    const xCenter = document.body.offsetWidth / 2;\n    const yCenter = document.body.offsetHeight / 2;\n    const boundingRect = anchorNode.getClientRects()[0];\n\n    const onBottomHalf = boundingRect.y > yCenter;\n    const onLeftHalf = boundingRect.x < xCenter;\n\n    let xOffset = (anchorNode.offsetWidth + padding);\n    let yOffset = (anchorNode.offsetHeight + padding);\n\n    if (onBottomHalf) {\n        style.bottom = '0';\n        yOffset *= -1;\n    } else {\n        style.top = '0';\n    }\n\n    if (onLeftHalf) {\n        style.left = '0';\n    } else {\n        if (displayBeside) {\n            xOffset = hiddenContentNode.offsetWidth + padding;\n        } else {\n            style.right = '0';\n        }\n        xOffset *= -1;\n    }\n\n    if (!displayBeside) {\n        style.transform = `translateY(${yOffset}px)`;\n    } else {\n        style.transform = `translateX(${xOffset}px)`;\n    }\n\n    return style;\n}\n\nconst Popover = ({anchor, content, children, displayBeside, redrawOnChange, closeOnClick}) => {\n    const popoverAnchor = anchor || children;\n\n    const [menuIsOpen, setMenuIsOpen] = useState(false);\n    const [popoverStyle, setPopOverStyle] = useState({});\n\n    const anchorEl = useRef(null);\n    const hiddenContentEl = useRef(null);\n\n    // Calculate position after anchored component is rendered.\n    useEffect(() => {\n        setPopOverStyle(calculateStyle(displayBeside, anchorEl.current, hiddenContentEl.current, 2))\n    }, [displayBeside, redrawOnChange]);\n\n    // Allow closing by clicking outside of the popover\n    const addOutsideListeners = () => {\n        document.addEventListener('click', handleOutsideClick)\n        document.addEventListener('touchstart', handleOutsideClick);\n    }\n\n    const removeOutsideListeners = () => {\n        document.removeEventListener('click', handleOutsideClick);\n        document.removeEventListener('touchend', handleOutsideClick);\n    }\n    const handleOutsideClick = () => {\n        setMenuIsOpen(false);\n        removeOutsideListeners();\n    }\n\n    const changeOpenState = (setOpen) => {\n        if (setOpen && !menuIsOpen) {\n            addOutsideListeners();\n        } else if (!setOpen) {\n            removeOutsideListeners();\n        }\n        setMenuIsOpen(setOpen);\n    }\n    const handleClick = () => {\n        changeOpenState(!menuIsOpen);\n    };\n\n    const handleClickPopover = (event) => {\n        if (closeOnClick) {\n            changeOpenState(false);\n        }\n        event.nativeEvent.stopImmediatePropagation()\n    }\n\n    return (\n        <div className=\"Popover\">\n            <CSSTransition in={menuIsOpen} classNames='visibility' timeout={200}>\n                <div ref={hiddenContentEl} className=\"hidden-content\" style={popoverStyle}\n                     onClick={handleClickPopover}>\n                    {content}\n                </div>\n            </CSSTransition>\n            <div className=\"anchor\" ref={anchorEl} onClick={handleClick}>\n                {popoverAnchor}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Popover;","import React, {useState} from \"react\";\nimport './ChartApp.scss';\nimport {BarChart, ResponsiveContainer, Bar, XAxis, YAxis, Tooltip, Legend} from 'recharts';\n\nconst BarChartApp = ({name, timestamp}) => {\n    const APP_PERSIST_KEY = `${name}-${timestamp}`;\n\n    const generateData = () => {\n        const dataBuffer = [];\n        for (let i = 0; i < 10; i++) {\n            dataBuffer.push({\n                name: `Day ${i + 1}`,\n                series1: Math.round(Math.random() * 1000),\n                series2: Math.round(Math.random() * 1000)\n            })\n        }\n        localStorage.setItem(APP_PERSIST_KEY, JSON.stringify(dataBuffer));\n        return dataBuffer;\n    }\n\n    const deserializedState = JSON.parse(localStorage.getItem(APP_PERSIST_KEY)) || generateData();\n    const [generatedData, setGeneratedDate] = useState(deserializedState);\n    const formatLegend = (legendName) => {\n        return legendName === 'series1' ? \"Series 1\" : \"Series 2\";\n    }\n\n    const handleGenerateData = () => {\n        setGeneratedDate(generateData());\n    }\n\n    return (\n        <div className=\"ChartContainer\">\n            <div className=\"chartHolder\">\n                <ResponsiveContainer>\n                    <BarChart data={generatedData}\n                              margin={{top: 30, right: 25, left: 5, bottom: 25}}\n                    >\n                        <XAxis dataKey=\"name\"/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Legend formatter={formatLegend}/>\n                        <Bar dataKey=\"series2\" fill=\"lightgrey\"/>\n                        <Bar dataKey=\"series1\" fill=\"lightblue\"/>\n                    </BarChart>\n                </ResponsiveContainer>\n            </div>\n            <div className=\"regenerate\">\n                <button onClick={handleGenerateData}>Regenerate Data</button>\n            </div>\n        </div>\n    );\n}\n\nexport default BarChartApp;","import React, {useState} from \"react\";\nimport './ChartApp.scss';\nimport {PieChart, ResponsiveContainer, Cell, Pie, Tooltip, Legend} from 'recharts';\n\nconst PieChartApp = ({name, timestamp}) => {\n    const APP_PERSIST_KEY = `${name}-${timestamp}`;\n\n    const sliceColors = ['#0077B6', '#0096C7', '#48CAE4', '#90e0ef', '#CAF0F8', '#D0E6EB']\n\n    const generateData = () => {\n        const dataBuffer = [];\n        for (let i = 0; i < 6; i++) {\n            dataBuffer.push({\n                name: `Group ${i + 1}`,\n                value: Math.round(Math.random() * 1000),\n            })\n        }\n        localStorage.setItem(APP_PERSIST_KEY, JSON.stringify(dataBuffer));\n        return dataBuffer;\n    }\n\n    let deserializedState = JSON.parse(localStorage.getItem(APP_PERSIST_KEY)) || generateData();\n    const [generatedData, setGeneratedDate] = useState(deserializedState);\n\n    const handleGenerateData = () => {\n        setGeneratedDate(generateData());\n    }\n\n    return (\n        <div className=\"ChartContainer\">\n            <div className=\"chartHolder\">\n                <ResponsiveContainer>\n                    <PieChart>\n                        <Pie data={generatedData}\n                             innerRadius={'30%'}\n                             margin={{bottom: 25}}\n                             animationBegin={0} animationDuration={450}>\n                            {generatedData.map((entry, index) => <Cell fill={sliceColors[index]}/>)}\n                        </Pie>\n                        <Tooltip/>\n                        <Legend/>\n                    </PieChart>\n                </ResponsiveContainer>\n            </div>\n            <div className=\"regenerate\">\n                <button onClick={handleGenerateData}>Regenerate Data</button>\n            </div>\n        </div>\n    );\n}\n\nexport default PieChartApp;","import React, {useState} from \"react\";\n\nconst NotesApp = ({name, timestamp}) => {\n    const APP_PERSIST_KEY = `${name}-${timestamp}`;\n    const deserializedState = localStorage.getItem(APP_PERSIST_KEY);\n    const [textContent, setTextContent] = useState(deserializedState || \"\");\n\n    const handleChange = (event) => {\n        const text = event.target.value;\n        localStorage.setItem(APP_PERSIST_KEY, text);\n        setTextContent(text);\n    }\n    return (\n        <textarea placeholder=\"Enter some notes...\" value={textContent} onChange={handleChange}/>\n    )\n}\n\nexport default NotesApp;","import React, {useContext, useState} from \"react\";\nimport Notes from \"../icons/note.svg\";\nimport BarChartIcon from \"../icons/bar-chart.svg\"\nimport PieChartIcon from \"../icons/pie-chart.svg\"\nimport BarChartApp from \"../Apps/BarChartApp\";\nimport PieChartApp from \"../Apps/PieChartApp\";\nimport NotesApp from \"../Apps/NotesApp\";\n\nconst AppListContext = React.createContext([{}, newState => {\n}]);\n\nconst applications = [\n    {\n        icon: Notes,\n        name: \"Notes\",\n        description: \"Take some notes\",\n        content: <NotesApp/>\n    },\n    {\n        icon: BarChartIcon,\n        name: \"Bar Graphs\",\n        description: \"Randomized bar graphs\",\n        content: <BarChartApp/>\n    },\n    {\n        icon: PieChartIcon,\n        name: \"Pie Chart\",\n        description: \"Randomized pie graphs\",\n        content: <PieChartApp/>\n    }\n];\n\nconst OPEN_APP_PERSISTENCE_KEY = 'openAppList';\n\nconst AppListProvider = (props) => {\n    const storedState = localStorage.getItem(OPEN_APP_PERSISTENCE_KEY);\n    const [state, setState] = useState({\n        openAppList: (storedState && JSON.parse(storedState)) || []\n    });\n\n    return <AppListContext.Provider value={[state, setState]} {...props} />\n}\n\nlet numWindows = 0;\n\nconst useAppList = () => {\n    const [state, setState] = useContext(AppListContext);\n\n    const saveAppListState = () => {\n        localStorage.setItem('openAppList', JSON.stringify(state.openAppList));\n    }\n\n    const setActiveApp = (name, timestamp, toggle) => {\n        const newState = {...state};\n\n        const clickedAppConfig = newState.openAppList\n            .find(item => item.name === name && item.timestamp === timestamp);\n\n        if (clickedAppConfig) {\n            Object.assign(clickedAppConfig, {\n                lastActive: new Date().getTime(),\n                isActive: toggle && clickedAppConfig.isActive === true ? false : true\n            });\n\n            clickedAppConfig.windowConfiguration.minimized = toggle && !clickedAppConfig.isActive ? true : false;\n        }\n\n        newState.openAppList\n            .sort((item1, item2) => {\n                return item1.lastActive - item2.lastActive\n            })\n            .forEach((item, index) => {\n                item.windowConfiguration.zIndex = index;\n                if (item.name !== name || item.timestamp !== timestamp) {\n                    item.isActive = false;\n                }\n            });\n        newState.openAppList.sort((item1, item2) => {\n            return item1.timestamp - item2.timestamp\n        });\n        setState(newState);\n        saveAppListState();\n    }\n\n    const getAppFromName = appName => applications.find((currentConfig => currentConfig.name === appName));\n\n    const closeApp = (appName, timestamp) => {\n        const index = state.openAppList.findIndex(app => app.name === appName && timestamp === app.timestamp);\n        state.openAppList.splice(index, 1);\n        saveAppListState();\n        setState({...state});\n    }\n\n    const openApp = (appName) => {\n        const timestamp = (new Date()).getTime()\n        state.openAppList.push({\n            ...getAppFromName(appName),\n            timestamp,\n            windowConfiguration: {\n                width: 400,\n                height: 400,\n                top: `${numWindows * 34 % 500}px`,\n                left: `${numWindows * 34 % 500}px`,\n                maximized: false\n            }\n        });\n        numWindows++;\n        setActiveApp(appName, timestamp);\n        saveAppListState();\n    }\n\n    const getOpenConfigFromName = (name, timestamp) => {\n        return state.openAppList.find(windowConfig =>\n            windowConfig.name === name && windowConfig.timestamp === timestamp);\n    }\n\n    const persistNewAppConfig = (name, timestamp, windowConfiguration) => {\n        const appConfig = getOpenConfigFromName(name, timestamp);\n        appConfig.windowConfiguration = {...appConfig.windowConfiguration, ...windowConfiguration};\n        saveAppListState();\n        setState({...state})\n    }\n\n    return {\n        openAppList: state.openAppList,\n        availableAppList: applications,\n        getAppFromName,\n        openApp,\n        closeApp,\n        persistNewAppConfig,\n        setActiveApp,\n    }\n}\n\nexport {AppListProvider, useAppList}\n","import React from \"react\";\nimport \"./Menu.scss\"\n\nimport {useAppList} from \"../../Contexts/AppListContext\";\n\nconst MenuEntry = ({icon, name, description, clickHandler}) => {\n    return (\n        <div className='MenuEntry' onClick={() => clickHandler(name)}>\n            <img src={icon} className=\"icon-holder\" alt=\"\"/>\n            <div className=\"title\">{name}</div>\n            <div className=\"description\">{description}</div>\n        </div>\n    )\n};\n\nconst Menu = () => {\n    const {openApp, availableAppList} = useAppList();\n    return (\n        <div className=\"Menu\">\n            {availableAppList.map(menuEntry => (\n                <MenuEntry {...menuEntry} key={menuEntry.name} clickHandler={openApp}/>)\n            )}\n        </div>\n    )\n}\n\nexport default Menu;","import React, {useContext, useState} from \"react\";\n\nconst DesktopConfigContext = React.createContext([{}, newState => {\n}]);\n\nconst DESKTOP_CONFIG_PERSISTENCE_KEY = 'desktopConfig';\n\nconst DesktopConfigProvider = (props) => {\n    let storedState = {\n        centered: false,\n        taskbarLocation: \"bottom\"\n    };\n\n    try {\n        const deserializedState = JSON.parse(localStorage.getItem(DESKTOP_CONFIG_PERSISTENCE_KEY));\n        if (deserializedState) {\n            storedState = deserializedState\n        }\n    } catch {\n        console.log(\"Error restoring desktop config, restoring to default\");\n    }\n\n    const [state, setState] = useState(storedState);\n    return <DesktopConfigContext.Provider value={[state, setState]} {...props} />\n}\n\nconst useDesktopConfig = () => {\n    const [state, setState] = useContext(DesktopConfigContext);\n\n    const saveDesktopConfigState = (newState) => {\n        localStorage.setItem('desktopConfig', JSON.stringify(newState))\n    }\n\n    const setCentered = (isCentered) => {\n        const newState = {...state, centered: isCentered};\n        setState(newState);\n        saveDesktopConfigState(newState);\n    }\n\n    const setTaskbarLocation = (taskbarLocation) => {\n        const newState = {...state, taskbarLocation: taskbarLocation};\n        setState(newState);\n        saveDesktopConfigState(newState);\n    }\n\n    return {\n        centered: state.centered,\n        taskbarLocation: state.taskbarLocation,\n        setCentered,\n        setTaskbarLocation,\n    }\n}\n\nexport {DesktopConfigProvider, useDesktopConfig};","import React from \"react\";\nimport './Configuration.scss';\nimport {useDesktopConfig} from \"../../Contexts/DesktopConfigContext\";\n\nconst Configuration = () => {\n\n    const {centered, setCentered, taskbarLocation, setTaskbarLocation} = useDesktopConfig();\n\n    return (\n        <div className=\"Configuration\">\n            <fieldset onChange={(event) => setTaskbarLocation(event.target.value)}>\n                <legend>Taskbar Location</legend>\n                <label>\n                    <input type=\"radio\" id=\"top\" name='taskbarLocation' value=\"top\"\n                           checked={taskbarLocation === \"top\"}/>\n                    Top\n                </label>\n                <label>\n                    <input type=\"radio\" id=\"right\" name='taskbarLocation' value=\"right\"\n                           checked={taskbarLocation === \"right\"}/>\n                    Right\n                </label>\n                <label>\n                    <input type=\"radio\" id=\"bottom\" name='taskbarLocation' value=\"bottom\"\n                           checked={taskbarLocation === \"bottom\"}/>\n                    Bottom\n                </label>\n                <label>\n                    <input type=\"radio\" id=\"left\" name='taskbarLocation' value=\"left\"\n                           checked={taskbarLocation === \"left\"}/>\n                    Left\n                </label>\n            </fieldset>\n            <fieldset onChange={(event) => setCentered(event.target.value === \"true\")}>\n                <legend>Taskbar Centering</legend>\n                <label>\n                    <input type=\"radio\" id=\"top\" name='taskbarCentering' value={true} checked={centered}/>\n                    Centered\n                </label>\n                <label>\n                    <input type=\"radio\" id=\"right\" name='taskbarCentering' value={false} checked={!centered}/>\n                    Not Centered\n                </label>\n            </fieldset>\n        </div>\n    )\n};\n\n\nexport default Configuration;","import React from \"react\";\nimport './Taskbar.scss'\nimport TaskbarButton from \"../taskbarButton/TaskbarButton\";\nimport classNames from 'classnames';\nimport Popover from \"../Popover/Popover\";\nimport Menu from \"../Menu/Menu\";\nimport Configuration from \"../Configuration/Configuration\";\n\nimport {useDesktopConfig} from \"../../Contexts/DesktopConfigContext\";\nimport {useAppList} from \"../../Contexts/AppListContext\";\n\nimport StartIcon from '../../icons/start.svg'\nimport CogIcon from '../../icons/settings.svg'\n\nconst Taskbar = () => {\n    const {centered, taskbarLocation} = useDesktopConfig();\n    const {openAppList, setActiveApp} = useAppList();\n\n    const vertical = taskbarLocation === \"left\" || taskbarLocation === \"right\";\n\n    const getTaskbarButtonHandler = ({name, timestamp}) => {\n        return () => setActiveApp(name, timestamp, true);\n    }\n\n    const taskbarButtons = openAppList.map(value =>\n        <TaskbarButton\n            hideLabel={vertical}\n            key={value.timestamp}\n            icon={value.icon}\n            name={value.name}\n            isActive={value.isActive}\n            handleClick={getTaskbarButtonHandler(value)}>\n        </TaskbarButton>);\n\n    const classes = classNames({\n        'Taskbar': true,\n        'center': centered,\n        'vertical': vertical\n    });\n\n    return (\n        <div className={classes}>\n            <Popover content={<Menu/>} displayBeside={vertical} redrawOnChange={taskbarLocation}>\n                <TaskbarButton name=\"hello\">\n                    <img className=\"small-icon\" src={StartIcon} alt=\"\"/>\n                </TaskbarButton>\n            </Popover>\n            {taskbarButtons}\n            <div className={!centered ? 'last-item' : ''}>\n                <Popover content={<Configuration/>} displayBeside={vertical} redrawOnChange={taskbarLocation}\n                         className=\"last-item\">\n                    <TaskbarButton>\n                        <img className=\"small-icon\" src={CogIcon} alt=\"\"/>\n                    </TaskbarButton>\n                </Popover>\n            </div>\n        </div>\n    )\n}\n\nexport default Taskbar;","import React, {useEffect, useState} from \"react\";\nimport {useAppList} from \"../../Contexts/AppListContext\";\nimport './Window.scss';\n\nimport {IoIosCloseCircleOutline as CloseIcon} from 'react-icons/io'\nimport {VscChromeMinimize as MinimizeIcon} from 'react-icons/vsc'\nimport {AiOutlineExpandAlt as MaximizeIcon} from 'react-icons/ai'\nimport {CSSTransition} from \"react-transition-group\";\nimport classNames from \"classnames\";\n\n// TODO: Move more of config to not be passed in ?\nconst Window = ({name, timestamp, icon, windowConfiguration = {}, boundingNode, isActive}) => {\n    const {width, height, zIndex, top, left, minimized, maximized} = windowConfiguration;\n    const windowNodeRef = React.useRef(null);\n    const {setActiveApp, persistNewAppConfig, closeApp, getAppFromName} = useAppList();\n    const {content} = getAppFromName(name);\n\n    // State variables for dragging and resizing the window.\n    let xMouseDownStart, yMouseDownStart = 0;\n    let parentBoundingBox, windowBoundingBox = {};\n\n    // Resize window variables\n    let xMaxGrowth, yMaxGrowth = 0;\n    let startWidth, startHeight = 0;\n    let constrainToHorizontal, constrainToVertical = false;\n\n    // Drag window offset variables.\n    let dragXOffset, dragYOffset = 0;\n\n    // Used for animating appearing and disappearing\n    const [firstTime, setFirstTime] = useState(true);\n    const [closing, setIsClosing] = useState(false);\n\n    const getBoundingNode = () => {\n        return boundingNode.current || windowNodeRef.current.parentNode;\n    }\n\n    const persistWindowPositioning = (maximized, minimized) => {\n        const style = windowNodeRef.current.style;\n        persistNewAppConfig(name, timestamp, {\n            top: parseInt(style.top),\n            left: parseInt(style.left),\n            width: parseInt(style.width),\n            height: parseInt(style.height),\n            maximized: maximized,\n            minimized: minimized,\n        });\n    }\n\n    const getEventCoordinates = (event) => {\n        const result = {\n            clientX: event.clientX,\n            clientY: event.clientY\n        }\n        if (event.type.startsWith('touch')) {\n            result.clientX = Math.round(event.touches[0].clientX);\n            result.clientY = Math.round(event.touches[0].clientY);\n        }\n        return result;\n    }\n\n    const setupMouseInteraction = (event) => {\n        windowBoundingBox = windowNodeRef.current.getBoundingClientRect();\n        parentBoundingBox = getBoundingNode().getBoundingClientRect();\n        const coordinates = getEventCoordinates(event);\n        xMouseDownStart = coordinates.clientX;\n        yMouseDownStart = coordinates.clientY;\n    }\n\n    const handleMouseDownResize = (event) => {\n        setupMouseInteraction(event);\n\n        xMaxGrowth = parentBoundingBox.right - windowBoundingBox.right;\n        yMaxGrowth = parentBoundingBox.bottom - windowBoundingBox.bottom;\n\n        const node = windowNodeRef.current;\n        startWidth = node.clientWidth;\n        startHeight = node.clientHeight;\n\n        const constrain = event.target.getAttribute('constrain');\n        if (constrain === 'horizontal') {\n            constrainToHorizontal = true;\n        }\n        if (constrain === 'vertical') {\n            constrainToVertical = true;\n        }\n\n        document.addEventListener('mousemove', handleMouseMoveResize);\n        document.addEventListener('touchmove', handleMouseMoveResize);\n        document.addEventListener('mouseup', handleMouseUpResize);\n        document.addEventListener('touchend', handleMouseUpResize);\n\n        setActiveApp(name, timestamp);\n    }\n\n    const handleMouseMoveResize = (event) => {\n        const {clientX, clientY} = getEventCoordinates(event);\n        const diffX = clientX - xMouseDownStart;\n        const diffY = clientY - yMouseDownStart;\n\n        if (!constrainToVertical) {\n            windowNodeRef.current.style.width = startWidth + Math.min(diffX, xMaxGrowth) + 'px';\n        }\n        if (!constrainToHorizontal) {\n            windowNodeRef.current.style.height = startHeight + Math.min(diffY, yMaxGrowth) + 'px';\n        }\n        windowNodeRef.current.classList.add('resizing');\n    }\n\n    const handleMouseUpResize = () => {\n        document.removeEventListener('mousemove', handleMouseMoveResize);\n        document.removeEventListener('touchmove', handleMouseMoveResize);\n        document.removeEventListener('mouseup', handleMouseUpResize);\n        document.removeEventListener('touchup', handleMouseUpResize);\n        windowNodeRef.current.classList.remove('resizing');\n        constrainToHorizontal = constrainToVertical = false;\n        persistWindowPositioning();\n    }\n\n    const handleMouseDownDrag = (event) => {\n        setupMouseInteraction(event);\n        const coordinates = getEventCoordinates(event);\n        setActiveApp(name, timestamp);\n        if (maximized) {\n            return\n        }\n        const node = event.currentTarget;\n        if (event.target.attributes.drag) {\n            document.addEventListener('mousemove', handleMouseMoveDrag);\n            document.addEventListener('touchmove', handleMouseMoveDrag);\n            document.addEventListener('mouseup', handleMouseUpDrag);\n            document.addEventListener('touchend', handleMouseUpDrag);\n            dragXOffset = node.offsetLeft - coordinates.clientX;\n            dragYOffset = node.offsetTop - coordinates.clientY;\n        }\n    }\n\n    const handleMouseMoveDrag = (e) => {\n        const {clientX, clientY} = getEventCoordinates(e);\n        const draggedNode = windowNodeRef.current;\n        const draggedBoundingBox = draggedNode.getBoundingClientRect();\n        const xMax = parentBoundingBox.width - draggedBoundingBox.width;\n        const yMax = parentBoundingBox.height - draggedBoundingBox.height;\n\n        const diffX = clientX - xMouseDownStart;\n        const diffY = clientY - yMouseDownStart;\n\n        // Keep the window in bounds of its containing element.\n        const xLocation = Math.min(Math.max(xMouseDownStart + diffX + dragXOffset, 0), xMax);\n        const yLocation = Math.min(Math.max(yMouseDownStart + diffY + dragYOffset, 0), yMax);\n\n        draggedNode.style.left = `${xLocation}px`;\n        draggedNode.style.top = `${yLocation}px`;\n        draggedNode.classList.add('dragging');\n    }\n\n    const handleMouseUpDrag = () => {\n        document.removeEventListener('mousemove', handleMouseMoveDrag);\n        document.removeEventListener('touchmove', handleMouseMoveDrag);\n        document.removeEventListener('mouseup', handleMouseUpDrag);\n        document.removeEventListener('touchend', handleMouseUpDrag);\n        windowNodeRef.current.classList.remove('dragging');\n        persistWindowPositioning();\n    }\n\n    const handleCloseClick = () => {\n        setIsClosing(true);\n        // Remove the window after the animation\n        setTimeout(() => {\n            closeApp(name, timestamp)\n        }, 200);\n    }\n\n    const handleMaximizeToggle = () => {\n        persistWindowPositioning(!maximized, false);\n    }\n\n    const handleMinimizeToggle = () => {\n        setActiveApp(null);\n        persistWindowPositioning(false, !minimized);\n    }\n\n    // Allow fade in animation.\n    useEffect(() => {\n        if (firstTime) {\n            setFirstTime(false);\n        }\n    }, [firstTime])\n\n    const classes = classNames({\n        'maximized': maximized,\n        'minimized': minimized,\n        'active': isActive,\n        'Window': true\n    });\n\n    const style = {\n        width: `${width}px`,\n        height: `${height}px`,\n        zIndex,\n        top: top,\n        left: left\n    }\n\n    // Wrap the component with props specifying the name and timestamp.  This allows the app to persist and load\n    // persisted data.\n    const wrappedContent = React.Children.map(content, child => React.cloneElement(child, {timestamp, name}));\n\n    // Set default position to whatever the last save translate was.\n    return (\n        <CSSTransition in={!firstTime && !closing} classNames='visibility' timeout={200}>\n            <div ref={windowNodeRef} className={classes} style={style} onMouseDown={handleMouseDownDrag}\n                 onTouchStart={handleMouseDownDrag}>\n                <img className=\"window-icon\" alt=\"\" src={icon} drag=\"true\" draggable=\"false\"/>\n                <div className=\"header drag\" drag=\"true\">\n                    <div className=\"tools\" drag=\"true\">\n                        <span className=\"window-tools\" onClick={handleCloseClick}><CloseIcon/></span>\n                        <span className=\"window-tools\" onClick={handleMaximizeToggle}><MaximizeIcon/></span>\n                        <span className=\"window-tools\" onClick={handleMinimizeToggle}><MinimizeIcon/></span>\n                    </div>\n                    <span className=\"window-title\" drag=\"true\">{name}</span>\n                </div>\n                <div className=\"body\">\n                    <div\n                        onMouseDown={handleMouseDownResize} onTouchStart={handleMouseDownResize}\n                        onMouseUp={handleMouseUpResize} onTouchEnd={handleMouseUpResize}>\n                        <div constrain=\"horizontal\" className=\"resize right\"/>\n                        <div className=\"resize bottom-right\"/>\n                        <div constrain=\"vertical\" className=\"resize bottom\"/>\n                    </div>\n                    {wrappedContent}\n                </div>\n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default Window;","import React from 'react';\nimport './App.scss';\nimport Taskbar from \"./widgets/taskbar/Taskbar\";\nimport Window from './widgets/window/Window'\n\nimport {useDesktopConfig} from \"./Contexts/DesktopConfigContext\";\nimport {useAppList} from \"./Contexts/AppListContext\";\n\nfunction App() {\n    const {taskbarLocation} = useDesktopConfig();\n    const {openAppList} = useAppList();\n    const desktopNodeRef = React.useRef(null);\n\n    return (\n        <div className=\"App\">\n            <div className={`grid-container taskbar-${taskbarLocation}`}>\n                <div id=\"desktop\" ref={desktopNodeRef}>\n                    {openAppList.map(currentApp =>\n                        <Window key={currentApp.timestamp}\n                                {...currentApp}\n                                boundingNode={desktopNodeRef}/>)}\n                </div>\n                <div id=\"taskbar\" className={'taskbar-anchor'}>\n                    <Taskbar/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {DesktopConfigProvider} from \"./Contexts/DesktopConfigContext\";\nimport {AppListProvider} from \"./Contexts/AppListContext\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppListProvider>\n            <DesktopConfigProvider>\n                <App/>\n            </DesktopConfigProvider>\n        </AppListProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}